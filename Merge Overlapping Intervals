/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        int n=intervals.size();
        ArrayList<Interval> ans=new ArrayList<>();

        //Sort the given array
        Collections.sort(intervals,new Comparator<Interval>()
        {
            @Override
            public int compare(Interval a,Interval b)
            {
                if(a.start>b.start) return 1;
                else if(a.start==b.start) return 0;
                else return -1;
            }
        }
        );
        
        Interval m=new Interval();
        m=intervals.get(0);
        for(int i=1;i<n;i++)
        {
            if(m.end<intervals.get(i).start)
            {
                ans.add(m);
                m=intervals.get(i);
            }
            else
            {
                m.start=Math.min(m.start,intervals.get(i).start);
                m.end=Math.max(m.end,intervals.get(i).end);
            }
            
        }
        ans.add(m);
        return ans;
    }
}
